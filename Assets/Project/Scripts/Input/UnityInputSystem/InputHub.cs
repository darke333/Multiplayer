//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Project/InputSettings/InputHub.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputHub : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputHub()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputHub"",
    ""maps"": [
        {
            ""name"": ""CharacterMove"",
            ""id"": ""22165a55-db48-4437-b96c-bf6fa6624d88"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fd7195fe-6726-40af-88c4-0303d7be18b3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9b2a7317-daea-49ba-b984-68d5a0575fb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""4c5407c0-7a71-47cf-bddb-2ff17546cf8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c13d023-7c45-4ed6-a031-6d0535f31ffd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e0a01df-22fe-49ad-9bfa-1f4e2821b721"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""21b3ec8d-3ff2-4ff8-9acb-aefc2fb14fef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a7393c55-effa-4db9-b335-be09a5c6cb12"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dfd1cd56-5571-4082-a701-73fd0307f43d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3b7379e5-2c7c-41fd-975c-a8303b7b2675"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""57236624-cf57-4b97-83ef-f355ce484580"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2bd97226-27da-43fb-b86c-e1a411787117"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""55a74e33-d1ad-46f8-a904-a8ca787e7c8a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f8d537fc-c148-4ffa-8b89-66778af7c66d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d7e18507-1118-42e3-98ee-9600ac576f3d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""276b208c-8738-471b-99ac-dc7297b0343b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterMove
        m_CharacterMove = asset.FindActionMap("CharacterMove", throwIfNotFound: true);
        m_CharacterMove_Movement = m_CharacterMove.FindAction("Movement", throwIfNotFound: true);
        m_CharacterMove_Jump = m_CharacterMove.FindAction("Jump", throwIfNotFound: true);
        m_CharacterMove_Dodge = m_CharacterMove.FindAction("Dodge", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterMove
    private readonly InputActionMap m_CharacterMove;
    private ICharacterMoveActions m_CharacterMoveActionsCallbackInterface;
    private readonly InputAction m_CharacterMove_Movement;
    private readonly InputAction m_CharacterMove_Jump;
    private readonly InputAction m_CharacterMove_Dodge;
    public struct CharacterMoveActions
    {
        private @InputHub m_Wrapper;
        public CharacterMoveActions(@InputHub wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterMove_Movement;
        public InputAction @Jump => m_Wrapper.m_CharacterMove_Jump;
        public InputAction @Dodge => m_Wrapper.m_CharacterMove_Dodge;
        public InputActionMap Get() { return m_Wrapper.m_CharacterMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterMoveActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterMoveActions instance)
        {
            if (m_Wrapper.m_CharacterMoveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnJump;
                @Dodge.started -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnDodge;
                @Dodge.performed -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnDodge;
                @Dodge.canceled -= m_Wrapper.m_CharacterMoveActionsCallbackInterface.OnDodge;
            }
            m_Wrapper.m_CharacterMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
            }
        }
    }
    public CharacterMoveActions @CharacterMove => new CharacterMoveActions(this);
    public interface ICharacterMoveActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
    }
}
